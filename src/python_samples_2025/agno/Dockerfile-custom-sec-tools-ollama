# Etapa 1: Compilar Python 3.10
FROM kalilinux/kali-rolling AS python-builder
ENV DEBIAN_FRONTEND=noninteractive

# Instalar dependencias necesarias para compilar Python
RUN apt-get update && apt-get install -y \
    build-essential \
    libssl-dev \
    libffi-dev \
    zlib1g-dev \
    libncurses5-dev \
    libgdbm-dev \
    libnss3-dev \
    libreadline-dev \
    libsqlite3-dev \
    libbz2-dev \
    wget \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Descargar y compilar Python 3.10 con 8 núcleos
RUN wget https://www.python.org/ftp/python/3.10.16/Python-3.10.16.tgz && \
    tar -xf Python-3.10.16.tgz && \
    cd Python-3.10.16 && \
    ./configure --enable-optimizations --prefix=/usr/local && \
    make -j 8 && \
    make altinstall && \
    cd .. && \
    rm -rf Python-3.10.16 Python-3.10.16.tgz

# Etapa 2: Imagen final con herramientas y configuraciones
FROM kalilinux/kali-rolling
ENV DEBIAN_FRONTEND=noninteractive

# Copiar Python compilado desde la etapa anterior
COPY --from=python-builder /usr/local /usr/local
RUN ln -sf /usr/local/bin/python3.10 /usr/bin/python3

# Actualizar e instalar dependencias base
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y \
    python3-pip \
    curl \
    git \
    nmap \
    nikto \
    hydra \
    metasploit-framework \
    exploitdb \
    netcat-traditional \
    net-tools \
    wordlists \
    chrony \
    iputils-ping \
    docker.io \
    xsltproc \
    cron \
    postgresql-client \
    sqlmap \
    beef-xss \
    php \
    nginx \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Instalar Poetry con Python 3.10
RUN curl -sSL https://install.python-poetry.org | /usr/local/bin/python3.10 - --version 1.8.3 && \
    ln -sf /root/.local/bin/poetry /usr/local/bin/poetry
ENV PATH="/usr/local/bin:$PATH"

# Establecer directorio de trabajo
WORKDIR /app

# Asegurar permisos del directorio de trabajo
RUN chmod -R 755 /app

# Copiar archivos de dependencias antes de configurar Poetry
COPY pyproject.toml poetry.lock ./

# Configurar Poetry para no crear entornos virtuales e instalar dependencias
RUN poetry config virtualenvs.create false && \
    poetry install --no-interaction --no-ansi --no-root --verbose && \
    /usr/local/bin/python3.10 -c "import sys; print(sys.path); import requests; print('requests installed successfully')" || { echo "Failed to import requests"; exit 1; }
# Copiar los directorios completos para mantener la estructura
COPY custom_agents/ ./custom_agents/
COPY custom_tools/ ./custom_tools/
COPY custom-sec-tools-ollama.py ./
COPY entrypoint.sh ./
COPY custom_tools/nmap_to_json.xsl /usr/local/share/nmap_to_json.xsl
COPY generate_exploit_mapping.py ./

# Crear el directorio /results para evitar errores durante la construcción
RUN mkdir -p /results

# Configurar el cron job para ejecutar generate_exploit_mapping.py cada minuto
# RUN echo "* * * * * /usr/local/bin/python3.10 /app/generate_exploit_mapping.py >> /results/cron.log 2>&1" > /etc/cron.d/exploit_mapping && \
#     chmod 0644 /etc/cron.d/exploit_mapping && \
#     crontab /etc/cron.d/exploit_mapping && \
#     touch /results/cron.log && \
#     chmod 666 /results/cron.log

# Asegurarse de que el servicio de cron pueda ejecutarse
RUN chmod 755 /etc/init.d/cron

# Descomprimir rockyou.txt si existe
RUN if [ -f /usr/share/wordlists/rockyou.txt.gz ]; then \
        gunzip /usr/share/wordlists/rockyou.txt.gz; \
    fi

# Asegurar permisos de ejecución para el entrypoint
RUN chmod +x /app/entrypoint.sh

# Establecer el entrypoint
ENTRYPOINT ["/bin/bash", "./entrypoint.sh"]